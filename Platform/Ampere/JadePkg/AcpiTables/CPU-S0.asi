/** @file

  Copyright (c) 2020 - 2021, Ampere Computing LLC. All rights reserved.<BR>

  SPDX-License-Identifier: BSD-2-Clause-Patent

**/

Device(C000) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x0)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x000, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x004, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x008, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x00c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x010, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x014, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x2c, 2)},          // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x34, 2)},          // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3c, 2)},          // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x050, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x054, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x058, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 0, 0xFD, 2}
  }) // Domain 0
}

Device(C001) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x080, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x084, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x088, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x08c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x090, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x094, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0xac, 2)},          // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0xb4, 2)},          // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xbc, 2)},          // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x0d0, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x0d4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x0d8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 1, 0xFD, 2}
  }) // Domain 1
}

Device(C002) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x100)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x100, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x104, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x108, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x10c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x110, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x114, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x12c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x134, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x13c, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x150, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x154, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x158, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 2, 0xFD, 2}
  }) // Domain 2
}

Device(C003) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x101)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x180, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x184, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x188, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x18c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x190, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x194, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x1ac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x1b4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1bc, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1d0, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1d4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1d8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 3, 0xFD, 2}
  }) // Domain 3
}

Device(C004) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x200)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x200, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x204, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x208, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x20c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x210, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x214, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x22c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x234, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x23c, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x250, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x254, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x258, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 4, 0xFD, 2}
  }) // Domain 4
}

Device(C005) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x201)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x280, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x284, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x288, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x28c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x290, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x294, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x2ac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x2b4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2bc, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2d0, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2d4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2d8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 5, 0xFD, 2}
  }) // Domain 5
}

Device(C006) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x300)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x300, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x304, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x308, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x30c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x310, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x314, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x32c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x334, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x33c, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x350, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x354, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x358, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 6, 0xFD, 2}
  }) // Domain 6
}

Device(C007) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x301)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x380, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x384, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x388, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x38c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x390, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x394, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x3ac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x3b4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3bc, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3d0, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3d4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3d8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 7, 0xFD, 2}
  }) // Domain 7
}

Device(C008) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x400)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x400, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x404, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x408, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x40c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x410, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x414, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x42c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x434, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x43c, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x450, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x454, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x458, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 8, 0xFD, 2}
  }) // Domain 8
}

Device(C009) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x401)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x480, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x484, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x488, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x48c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x490, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x494, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x4ac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x4b4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x4bc, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x4d0, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x4d4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x4d8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 9, 0xFD, 2}
  }) // Domain 9
}

Device(C010) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x500)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x500, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x504, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x508, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x50c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x510, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x514, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x52c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x534, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x53c, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x550, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x554, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x558, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 10, 0xFD, 2}
  }) // Domain 10
}

Device(C011) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x501)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x580, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x584, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x588, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x58c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x590, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x594, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x5ac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x5b4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x5bc, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x5d0, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x5d4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x5d8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 11, 0xFD, 2}
  }) // Domain 11
}

Device(C012) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x600)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x600, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x604, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x608, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x60c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x610, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x614, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x62c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x634, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x63c, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x650, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x654, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x658, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 12, 0xFD, 2}
  }) // Domain 12
}

Device(C013) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x601)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x680, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x684, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x688, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x68c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x690, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x694, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x6ac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x6b4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x6bc, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x6d0, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x6d4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x6d8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 13, 0xFD, 2}
  }) // Domain 13
}

Device(C014) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x700)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x700, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x704, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x708, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x70c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x710, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x714, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x72c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x734, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x73c, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x750, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x754, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x758, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 14, 0xFD, 2}
  }) // Domain 14
}

Device(C015) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x701)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x780, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x784, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x788, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x78c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x790, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x794, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x7ac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x7b4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x7bc, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x7d0, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x7d4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x7d8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 15, 0xFD, 2}
  }) // Domain 15
}

Device(C016) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x800)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x800, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x804, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x808, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x80c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x810, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x814, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x82c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x834, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x83c, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x850, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x854, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x858, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 16, 0xFD, 2}
  }) // Domain 16
}

Device(C017) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x801)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x880, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x884, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x888, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x88c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x890, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x894, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x8ac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x8b4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x8bc, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x8d0, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x8d4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x8d8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 17, 0xFD, 2}
  }) // Domain 17
}

Device(C018) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x900)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x900, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x904, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x908, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x90c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x910, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x914, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x92c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x934, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x93c, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x950, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x954, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x958, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 18, 0xFD, 2}
  }) // Domain 18
}

Device(C019) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x901)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x980, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x984, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x988, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x98c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x990, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x994, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x9ac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x9b4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x9bc, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x9d0, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x9d4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x9d8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 19, 0xFD, 2}
  }) // Domain 19
}

Device(C020) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0xa00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0xa00, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xa04, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xa08, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xa0c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xa10, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xa14, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0xa2c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0xa34, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xa3c, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xa50, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xa54, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xa58, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 20, 0xFD, 2}
  }) // Domain 20
}

Device(C021) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0xa01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0xa80, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xa84, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xa88, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xa8c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xa90, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xa94, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0xaac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0xab4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xabc, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xad0, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xad4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xad8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 21, 0xFD, 2}
  }) // Domain 21
}

Device(C022) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0xb00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0xb00, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xb04, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xb08, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xb0c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xb10, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xb14, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0xb2c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0xb34, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xb3c, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xb50, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xb54, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xb58, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 22, 0xFD, 2}
  }) // Domain 22
}

Device(C023) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0xb01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0xb80, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xb84, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xb88, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xb8c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xb90, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xb94, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0xbac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0xbb4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xbbc, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xbd0, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xbd4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xbd8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 23, 0xFD, 2}
  }) // Domain 23
}

Device(C024) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0xc00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0xc00, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xc04, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xc08, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xc0c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xc10, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xc14, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0xc2c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0xc34, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xc3c, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xc50, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xc54, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xc58, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 24, 0xFD, 2}
  }) // Domain 24
}

Device(C025) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0xc01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0xc80, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xc84, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xc88, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xc8c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xc90, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xc94, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0xcac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0xcb4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xcbc, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xcd0, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xcd4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xcd8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 25, 0xFD, 2}
  }) // Domain 25
}

Device(C026) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0xd00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0xd00, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xd04, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xd08, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xd0c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xd10, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xd14, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0xd2c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0xd34, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xd3c, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xd50, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xd54, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xd58, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 26, 0xFD, 2}
  }) // Domain 26
}

Device(C027) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0xd01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0xd80, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xd84, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xd88, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xd8c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xd90, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xd94, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0xdac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0xdb4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xdbc, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xdd0, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xdd4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xdd8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 27, 0xFD, 2}
  }) // Domain 27
}

Device(C028) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0xe00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0xe00, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xe04, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xe08, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xe0c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xe10, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xe14, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0xe2c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0xe34, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xe3c, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xe50, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xe54, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xe58, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 28, 0xFD, 2}
  }) // Domain 28
}

Device(C029) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0xe01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0xe80, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xe84, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xe88, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xe8c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xe90, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xe94, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0xeac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0xeb4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xebc, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xed0, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xed4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xed8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 29, 0xFD, 2}
  }) // Domain 29
}

Device(C030) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0xf00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0xf00, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xf04, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xf08, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xf0c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xf10, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xf14, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0xf2c, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0xf34, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xf3c, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xf50, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xf54, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xf58, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 30, 0xFD, 2}
  }) // Domain 30
}

Device(C031) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0xf01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0xf80, 2)},         // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xf84, 2)},         // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xf88, 2)},         // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xf8c, 2)},         // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0xf90, 2)},         // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xf94, 2)},         // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0xfac, 2)},         // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0xfb4, 2)},         // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xfbc, 2)},         // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xfd0, 2)},         // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xfd4, 2)},         // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0xfd8, 2)},         // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 31, 0xFD, 2}
  }) // Domain 31
}

Device(C032) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1000)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1000, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1004, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1008, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x100c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1010, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1014, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x102c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x1034, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x103c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1050, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1054, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1058, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 32, 0xFD, 2}
  }) // Domain 32
}

Device(C033) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1001)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1080, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1084, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1088, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x108c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1090, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1094, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x10ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x10b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x10bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x10d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x10d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x10d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 33, 0xFD, 2}
  }) // Domain 33
}

Device(C034) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1100)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1100, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1104, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1108, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x110c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1110, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1114, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x112c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x1134, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x113c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1150, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1154, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1158, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 34, 0xFD, 2}
  }) // Domain 34
}

Device(C035) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1101)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1180, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1184, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1188, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x118c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1190, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1194, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x11ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x11b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x11bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x11d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x11d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x11d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 35, 0xFD, 2}
  }) // Domain 35
}

Device(C036) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1200)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1200, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1204, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1208, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x120c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1210, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1214, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x122c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x1234, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x123c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1250, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1254, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1258, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 36, 0xFD, 2}
  }) // Domain 36
}

Device(C037) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1201)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1280, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1284, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1288, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x128c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1290, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1294, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x12ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x12b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x12bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x12d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x12d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x12d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 37, 0xFD, 2}
  }) // Domain 37
}

Device(C038) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1300)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1300, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1304, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1308, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x130c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1310, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1314, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x132c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x1334, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x133c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1350, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1354, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1358, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 38, 0xFD, 2}
  }) // Domain 38
}

Device(C039) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1301)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1380, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1384, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1388, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x138c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1390, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1394, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x13ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x13b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x13bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x13d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x13d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x13d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 39, 0xFD, 2}
  }) // Domain 39
}

Device(C040) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1400)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1400, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1404, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1408, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x140c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1410, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1414, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x142c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x1434, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x143c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1450, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1454, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1458, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 40, 0xFD, 2}
  }) // Domain 40
}

Device(C041) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1401)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1480, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1484, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1488, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x148c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1490, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1494, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x14ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x14b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x14bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x14d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x14d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x14d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 41, 0xFD, 2}
  }) // Domain 41
}

Device(C042) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1500)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1500, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1504, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1508, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x150c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1510, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1514, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x152c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x1534, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x153c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1550, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1554, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1558, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 42, 0xFD, 2}
  }) // Domain 42
}

Device(C043) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1501)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1580, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1584, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1588, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x158c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1590, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1594, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x15ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x15b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x15bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x15d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x15d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x15d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 43, 0xFD, 2}
  }) // Domain 43
}

Device(C044) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1600)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1600, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1604, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1608, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x160c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1610, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1614, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x162c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x1634, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x163c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1650, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1654, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1658, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 44, 0xFD, 2}
  }) // Domain 44
}

Device(C045) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1601)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1680, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1684, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1688, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x168c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1690, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1694, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x16ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x16b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x16bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x16d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x16d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x16d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 45, 0xFD, 2}
  }) // Domain 45
}

Device(C046) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1700)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1700, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1704, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1708, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x170c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1710, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1714, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x172c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x1734, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x173c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1750, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1754, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1758, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 46, 0xFD, 2}
  }) // Domain 46
}

Device(C047) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1701)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1780, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1784, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1788, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x178c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1790, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1794, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x17ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x17b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x17bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x17d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x17d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x17d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 47, 0xFD, 2}
  }) // Domain 47
}

Device(C048) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1800)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1800, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1804, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1808, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x180c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1810, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1814, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x182c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x1834, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x183c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1850, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1854, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1858, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 48, 0xFD, 2}
  }) // Domain 48
}

Device(C049) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1801)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1880, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1884, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1888, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x188c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1890, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1894, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x18ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x18b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x18bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x18d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x18d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x18d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 49, 0xFD, 2}
  }) // Domain 49
}

Device(C050) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1900)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1900, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1904, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1908, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x190c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1910, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1914, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x192c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x1934, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x193c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1950, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1954, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1958, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 50, 0xFD, 2}
  }) // Domain 50
}

Device(C051) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1901)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1980, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1984, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1988, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x198c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1990, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1994, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x19ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x19b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x19bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x19d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x19d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x19d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 51, 0xFD, 2}
  }) // Domain 51
}

Device(C052) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1a00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1a00, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1a04, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1a08, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1a0c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1a10, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1a14, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x1a2c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x1a34, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1a3c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1a50, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1a54, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1a58, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 52, 0xFD, 2}
  }) // Domain 52
}

Device(C053) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1a01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1a80, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1a84, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1a88, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1a8c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1a90, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1a94, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x1aac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x1ab4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1abc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1ad0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1ad4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1ad8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 53, 0xFD, 2}
  }) // Domain 53
}

Device(C054) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1b00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1b00, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1b04, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1b08, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1b0c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1b10, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1b14, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x1b2c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x1b34, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1b3c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1b50, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1b54, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1b58, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 54, 0xFD, 2}
  }) // Domain 54
}

Device(C055) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1b01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1b80, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1b84, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1b88, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1b8c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1b90, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1b94, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x1bac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x1bb4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1bbc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1bd0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1bd4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1bd8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 55, 0xFD, 2}
  }) // Domain 5
}

Device(C056) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1c00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1c00, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1c04, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1c08, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1c0c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1c10, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1c14, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x1c2c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x1c34, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1c3c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1c50, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1c54, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1c58, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 56, 0xFD, 2}
  }) // Domain 56
}

Device(C057) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1c01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1c80, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1c84, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1c88, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1c8c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1c90, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1c94, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x1cac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x1cb4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1cbc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1cd0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1cd4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1cd8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 57, 0xFD, 2}
  }) // Domain 57
}

Device(C058) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1d00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1d00, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1d04, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1d08, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1d0c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1d10, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1d14, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x1d2c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x1d34, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1d3c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1d50, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1d54, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1d58, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 58, 0xFD, 2}
  }) // Domain 58
}

Device(C059) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1d01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1d80, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1d84, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1d88, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1d8c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1d90, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1d94, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x1dac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x1db4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1dbc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1dd0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1dd4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1dd8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 59, 0xFD, 2}
  }) // Domain 59
}

Device(C060) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1e00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1e00, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1e04, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1e08, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1e0c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1e10, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1e14, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x1e2c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x1e34, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1e3c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1e50, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1e54, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1e58, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 60, 0xFD, 2}
  }) // Domain 60
}

Device(C061) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1e01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1e80, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1e84, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1e88, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1e8c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1e90, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1e94, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x1eac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x1eb4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1ebc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1ed0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1ed4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1ed8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 61, 0xFD, 2}
  }) // Domain 61
}

Device(C062) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1f00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1f00, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1f04, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1f08, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1f0c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1f10, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1f14, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x1f2c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x1f34, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1f3c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1f50, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1f54, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1f58, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 62, 0xFD, 2}
  }) // Domain 62
}

Device(C063) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x1f01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x1f80, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1f84, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1f88, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1f8c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x1f90, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1f94, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x1fac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x1fb4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1fbc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1fd0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1fd4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x1fd8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 63, 0xFD, 2}
  }) // Domain 63
}

Device(C064) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2000)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2000, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2004, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2008, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x200c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2010, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2014, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x202c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x2034, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x203c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2050, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2054, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2058, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 64, 0xFD, 2}
  }) // Domain 64
}

Device(C065) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2001)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2080, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2084, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2088, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x208c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2090, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2094, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x20ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x20b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x20bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x20d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x20d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x20d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 65, 0xFD, 2}
  }) // Domain 65
}

Device(C066) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2100)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2100, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2104, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2108, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x210c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2110, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2114, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x212c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x2134, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x213c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2150, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2154, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2158, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 66, 0xFD, 2}
  }) // Domain 66
}

Device(C067) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2101)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2180, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2184, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2188, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x218c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2190, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2194, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x21ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x21b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x21bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x21d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x21d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x21d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 67, 0xFD, 2}
  }) // Domain 67
}

Device(C068) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2200)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2200, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2204, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2208, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x220c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2210, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2214, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x222c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x2234, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x223c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2250, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2254, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2258, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 68, 0xFD, 2}
  }) // Domain 68
}

Device(C069) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2201)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2280, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2284, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2288, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x228c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2290, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2294, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x22ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x22b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x22bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x22d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x22d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x22d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 69, 0xFD, 2}
  }) // Domain 69
}

Device(C070) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2300)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2300, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2304, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2308, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x230c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2310, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2314, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x232c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x2334, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x233c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2350, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2354, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2358, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 70, 0xFD, 2}
  }) // Domain 70
}

Device(C071) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2301)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2380, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2384, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2388, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x238c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2390, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2394, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x23ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x23b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x23bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x23d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x23d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x23d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 71, 0xFD, 2}
  }) // Domain 71
}

Device(C072) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2400)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2400, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2404, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2408, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x240c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2410, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2414, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x242c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x2434, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x243c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2450, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2454, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2458, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 72, 0xFD, 2}
  }) // Domain 72
}

Device(C073) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2401)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2480, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2484, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2488, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x248c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2490, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2494, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x24ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x24b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x24bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x24d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x24d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x24d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 73, 0xFD, 2}
  }) // Domain 73
}

Device(C074) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2500)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2500, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2504, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2508, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x250c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2510, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2514, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x252c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x2534, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x253c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2550, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2554, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2558, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 74, 0xFD, 2}
  }) // Domain 74
}

Device(C075) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2501)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2580, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2584, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2588, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x258c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2590, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2594, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x25ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x25b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x25bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x25d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x25d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x25d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 75, 0xFD, 2}
  }) // Domain 75
}

Device(C076) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2600)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2600, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2604, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2608, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x260c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2610, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2614, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x262c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x2634, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x263c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2650, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2654, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2658, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 76, 0xFD, 2}
  }) // Domain 76
}

Device(C077) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2601)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2680, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2684, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2688, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x268c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2690, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2694, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x26ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x26b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x26bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x26d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x26d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x26d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 77, 0xFD, 2}
  }) // Domain 77
}

Device(C078) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2700)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2700, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2704, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2708, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x270c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2710, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2714, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x272c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x2734, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x273c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2750, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2754, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2758, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 78, 0xFD, 2}
  }) // Domain 78
}

Device(C079) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2701)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2780, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2784, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2788, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x278c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2790, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2794, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x27ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x27b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x27bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x27d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x27d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x27d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 79, 0xFD, 2}
  }) // Domain 79
}

Device(C080) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2800)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2800, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2804, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2808, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x280c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2810, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2814, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x282c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x2834, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x283c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2850, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2854, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2858, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 80, 0xFD, 2}
  }) // Domain 80
}

Device(C081) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2801)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2880, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2884, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2888, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x288c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2890, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2894, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x28ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x28b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x28bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x28d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x28d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x28d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 81, 0xFD, 2}
  }) // Domain 81
}

Device(C082) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2900)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2900, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2904, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2908, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x290c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2910, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2914, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x292c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x2934, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x293c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2950, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2954, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2958, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 82, 0xFD, 2}
  }) // Domain 82
}

Device(C083) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2901)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2980, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2984, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2988, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x298c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2990, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2994, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x29ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x29b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x29bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x29d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x29d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x29d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 83, 0xFD, 2}
  }) // Domain 83
}

Device(C084) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2a00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2a00, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2a04, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2a08, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2a0c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2a10, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2a14, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x2a2c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x2a34, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2a3c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2a50, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2a54, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2a58, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 84, 0xFD, 2}
  }) // Domain 84
}

Device(C085) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2a01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2a80, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2a84, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2a88, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2a8c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2a90, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2a94, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x2aac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x2ab4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2abc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2ad0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2ad4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2ad8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 85, 0xFD, 2}
  }) // Domain 85
}

Device(C086) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2b00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2b00, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2b04, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2b08, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2b0c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2b10, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2b14, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x2b2c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x2b34, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2b3c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2b50, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2b54, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2b58, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 86, 0xFD, 2}
  }) // Domain 86
}

Device(C087) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2b01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2b80, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2b84, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2b88, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2b8c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2b90, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2b94, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x2bac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x2bb4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2bbc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2bd0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2bd4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2bd8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 87, 0xFD, 2}
  }) // Domain 87
}

Device(C088) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2c00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2c00, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2c04, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2c08, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2c0c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2c10, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2c14, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x2c2c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x2c34, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2c3c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2c50, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2c54, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2c58, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 88, 0xFD, 2}
  }) // Domain 88
}

Device(C089) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2c01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2c80, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2c84, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2c88, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2c8c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2c90, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2c94, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x2cac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x2cb4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2cbc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2cd0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2cd4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2cd8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 89, 0xFD, 2}
  }) // Domain 89
}

Device(C090) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2d00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2d00, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2d04, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2d08, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2d0c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2d10, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2d14, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x2d2c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x2d34, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2d3c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2d50, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2d54, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2d58, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 90, 0xFD, 2}
  }) // Domain 90
}

Device(C091) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2d01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2d80, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2d84, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2d88, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2d8c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2d90, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2d94, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x2dac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x2db4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2dbc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2dd0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2dd4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2dd8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 91, 0xFD, 2}
  }) // Domain 91
}

Device(C092) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2e00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2e00, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2e04, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2e08, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2e0c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2e10, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2e14, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x2e2c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x2e34, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2e3c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2e50, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2e54, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2e58, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 92, 0xFD, 2}
  }) // Domain 92
}

Device(C093) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2e01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2e80, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2e84, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2e88, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2e8c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2e90, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2e94, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x2eac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x2eb4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2ebc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2ed0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2ed4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2ed8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 93, 0xFD, 2}
  }) // Domain 93
}

Device(C094) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2f00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2f00, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2f04, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2f08, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2f0c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2f10, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2f14, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x2f2c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x2f34, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2f3c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2f50, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2f54, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2f58, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 94, 0xFD, 2}
  }) // Domain 94
}

Device(C095) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x2f01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x2f80, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2f84, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2f88, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2f8c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x2f90, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2f94, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x2fac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x2fb4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2fbc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2fd0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2fd4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x2fd8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 95, 0xFD, 2}
  }) // Domain 95
}

Device(C096) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3000)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3000, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3004, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3008, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x300c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3010, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3014, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x302c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x3034, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x303c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3050, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3054, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3058, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 96, 0xFD, 2}
  }) // Domain 96
}

Device(C097) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3001)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3080, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3084, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3088, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x308c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3090, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3094, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x30ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x30b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x30bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x30d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x30d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x30d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 97, 0xFD, 2}
  }) // Domain 97
}

Device(C098) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3100)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3100, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3104, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3108, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x310c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3110, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3114, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x312c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x3134, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x313c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3150, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3154, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3158, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 98, 0xFD, 2}
  }) // Domain 98
}

Device(C099) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3101)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3180, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3184, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3188, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x318c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3190, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3194, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x31ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x31b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x31bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x31d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x31d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x31d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 99, 0xFD, 2}
  }) // Domain 99
}

Device(C100) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3200)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3200, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3204, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3208, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x320c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3210, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3214, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x322c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x3234, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x323c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3250, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3254, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3258, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 100, 0xFD, 2}
  }) // Domain 100
}

Device(C101) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3201)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3280, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3284, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3288, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x328c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3290, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3294, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x32ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x32b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x32bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x32d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x32d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x32d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 101, 0xFD, 2}
  }) // Domain 101
}

Device(C102) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3300)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3300, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3304, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3308, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x330c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3310, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3314, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x332c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x3334, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x333c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3350, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3354, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3358, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 102, 0xFD, 2}
  }) // Domain 102
}

Device(C103) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3301)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3380, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3384, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3388, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x338c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3390, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3394, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x33ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x33b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x33bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x33d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x33d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x33d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 103, 0xFD, 2}
  }) // Domain 103
}

Device(C104) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3400)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3400, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3404, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3408, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x340c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3410, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3414, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x342c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x3434, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x343c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3450, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3454, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3458, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 104, 0xFD, 2}
  }) // Domain 104
}

Device(C105) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3401)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3480, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3484, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3488, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x348c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3490, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3494, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x34ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x34b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x34bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x34d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x34d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x34d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 105, 0xFD, 2}
  }) // Domain 105
}

Device(C106) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3500)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3500, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3504, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3508, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x350c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3510, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3514, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x352c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x3534, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x353c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3550, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3554, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3558, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 106, 0xFD, 2}
  }) // Domain 106
}

Device(C107) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3501)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3580, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3584, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3588, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x358c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3590, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3594, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x35ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x35b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x35bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x35d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x35d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x35d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 107, 0xFD, 2}
  }) // Domain 107
}

Device(C108) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3600)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3600, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3604, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3608, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x360c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3610, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3614, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x362c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x3634, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x363c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3650, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3654, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3658, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 108, 0xFD, 2}
  }) // Domain 108
}

Device(C109) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3601)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3680, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3684, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3688, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x368c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3690, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3694, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x36ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x36b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x36bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x36d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x36d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x36d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 109, 0xFD, 2}
  }) // Domain 109
}

Device(C110) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3700)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3700, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3704, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3708, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x370c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3710, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3714, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x372c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x3734, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x373c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3750, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3754, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3758, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 110, 0xFD, 2}
  }) // Domain 110
}

Device(C111) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3701)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3780, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3784, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3788, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x378c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3790, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3794, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x37ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x37b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x37bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x37d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x37d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x37d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 111, 0xFD, 2}
  }) // Domain 111
}

Device(C112) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3800)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3800, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3804, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3808, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x380c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3810, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3814, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x382c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x3834, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x383c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3850, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3854, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3858, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 112, 0xFD, 2}
  }) // Domain 112
}

Device(C113) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3801)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3880, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3884, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3888, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x388c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3890, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3894, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x38ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x38b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x38bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x38d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x38d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x38d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 113, 0xFD, 2}
  }) // Domain 113
}

Device(C114) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3900)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3900, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3904, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3908, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x390c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3910, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3914, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x392c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x3934, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x393c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3950, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3954, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3958, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 114, 0xFD, 2}
  }) // Domain 114
}

Device(C115) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3901)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3980, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3984, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3988, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x398c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3990, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3994, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x39ac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x39b4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x39bc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x39d0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x39d4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x39d8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 115, 0xFD, 2}
  }) // Domain 115
}

Device(C116) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3a00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3a00, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3a04, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3a08, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3a0c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3a10, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3a14, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x3a2c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x3a34, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3a3c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3a50, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3a54, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3a58, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 116, 0xFD, 2}
  }) // Domain 116
}

Device(C117) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3a01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3a80, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3a84, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3a88, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3a8c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3a90, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3a94, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x3aac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x3ab4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3abc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3ad0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3ad4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3ad8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 117, 0xFD, 2}
  }) // Domain 117
}

Device(C118) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3b00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3b00, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3b04, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3b08, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3b0c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3b10, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3b14, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x3b2c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x3b34, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3b3c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3b50, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3b54, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3b58, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 118, 0xFD, 2}
  }) // Domain 118
}

Device(C119) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3b01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3b80, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3b84, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3b88, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3b8c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3b90, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3b94, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x3bac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x3bb4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3bbc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3bd0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3bd4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3bd8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 119, 0xFD, 2}
  }) // Domain 119
}

Device(C120) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3c00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3c00, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3c04, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3c08, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3c0c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3c10, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3c14, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x3c2c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x3c34, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3c3c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3c50, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3c54, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3c58, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 120, 0xFD, 2}
  }) // Domain 120
}

Device(C121) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3c01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3c80, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3c84, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3c88, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3c8c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3c90, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3c94, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x3cac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x3cb4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3cbc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3cd0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3cd4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3cd8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 121, 0xFD, 2}
  }) // Domain 121
}

Device(C122) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3d00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3d00, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3d04, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3d08, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3d0c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3d10, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3d14, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x3d2c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x3d34, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3d3c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3d50, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3d54, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3d58, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 122, 0xFD, 2}
  }) // Domain 122
}

Device(C123) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3d01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3d80, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3d84, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3d88, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3d8c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3d90, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3d94, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x3dac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x3db4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3dbc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3dd0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3dd4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3dd8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 123, 0xFD, 2}
  }) // Domain 123
}

Device(C124) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3e00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3e00, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3e04, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3e08, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3e0c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3e10, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3e14, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x3e2c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x3e34, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3e3c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3e50, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3e54, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3e58, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 124, 0xFD, 2}
  }) // Domain 124
}

Device(C125) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3e01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3e80, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3e84, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3e88, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3e8c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3e90, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3e94, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x3eac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x3eb4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3ebc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3ed0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3ed4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3ed8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 125, 0xFD, 2}
  }) // Domain 125
}

Device(C126) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3f00)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3f00, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3f04, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3f08, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3f0c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3f10, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3f14, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x3f2c, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x3f34, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3f3c, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3f50, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3f54, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3f58, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package() {
    Package() {5, 0, 126, 0xFD, 2}
  }) // Domain 126
}

Device(C127) {
  Name(_HID, "ACPI0007")
  Name(_UID, 0x3f01)

  Method (_LPI, 0, NotSerialized) {
    return(PLPI)
  }

  Name(PCPC, Package() {
    23,                                                         // NumEntries
    3,                                                          // Revision
    ResourceTemplate(){Register(PCC, 32, 0, 0x3f80, 2)},        // Highest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3f84, 2)},        // Nominal Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3f88, 2)},        // Lowest Nonlinear Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3f8c, 2)},        // Lowest Performance
    ResourceTemplate(){Register(PCC, 32, 0, 0x3f90, 2)},        // Guaranteed Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3f94, 2)},        // Desired Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Minimum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Maximum Performance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Performance Reduction Tolerance Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Time Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Counter Wraparound Time
    ResourceTemplate(){Register(PCC, 64, 0, 0x3fac, 2)},        // Reference Counter Register
    ResourceTemplate(){Register(PCC, 64, 0, 0x3fb4, 2)},        // Delivered Counter Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3fbc, 2)},        // Performance Limited Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Enable Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Selection Enable
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Autonomous Activity Window Register
    ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)},     // Energy Performance Preference Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3fd0, 2)},        // Reference Performance Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3fd4, 2)},        // Lowest Frequency Register
    ResourceTemplate(){Register(PCC, 32, 0, 0x3fd8, 2)},        // Nominal Frequency Register
  })
  If (LEqual(CPCE, 0x1)) {
    Method (_CPC, 0, NotSerialized) {
      return(PCPC)
    }
  }
  //Performance State dependency
  Name(_PSD, Package(){
    Package() {5, 0, 127, 0xFD, 2}
  }) // Domain 127
}
